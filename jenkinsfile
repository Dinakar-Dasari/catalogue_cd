pipeline{
    agent {
        label "agent-1"
    }

    environment {
        appVersion = ''
        REGION = "us-east-1"
        ACC_ID = "315069654700"
        PROJECT = "roboshop"
        COMPONENT = "catalogue"
    }

    parameters {
        string(name: 'appVersion', description: 'Image version of the application')
        choice(name: 'deploy_to', choices: ['dev', 'qa', 'prod'], description: 'Pick the Environment')
    }
    stages{
        stage("Deployment"){
            steps{
                script{
                    withAWS(credentials: 'aws-cred', region: 'us-east-1'){
                        sh """
                            aws eks update-kubeconfig --region $REGION --name "$PROJECT-${params.deploy_to}"
                            kubectl get nodes
                            kubectl apply -f 01-namespace.yaml
                            sed -i "s/IMAGE_VERSION/${params.appVersion}/g" "values-${params.deploy_to}.yaml"
                            helm upgrade --install $COMPONENT -f values-${params.deploy_to}.yaml -n $PROJECT .
                        """    
                    }
                
                }
            }
        }

        stage("rollback"){
            steps{
                script{
                    withAWS(credentials: 'aws-cred', region: 'us-east-1'){
                        def deploymentStatus = sh(returnStdout: true, script: "kubectl rollout status deployment/catalogue --timeout=30s -n $PROJECT || echo FAILED").trim()
                        if(deploymentStatus.contains("successfully rolled out")){
                            echo "deployment is success"
                        } else {
                            sh """ 
                                helm rollback $COMPONENT -n $PROJECT
                            """
                        }
                        def rollbackStatus = sh(returnStdout: true, script: "kubectl rollout status deployment/catalogue --timeout=30s -n $PROJECT || echo FAILED").trim()
                        if(rollbackStatus.contains("successfully rolled out")){
                            error "deployment is failed. Rollback is success"
                        } else{
                            error "Deployment is Failure, Rollback Failure. Application is not running"
                        }                       
                    }
                }
            }
        }
    }
    
    post { 
        always { 
            echo 'I will always say Hello again!'
            deleteDir()
        }
        success { 
            echo 'Hello Success'
        }
        failure { 
            echo 'Hello Failure'
        }
    }

}
